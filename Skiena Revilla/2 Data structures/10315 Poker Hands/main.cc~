//---------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string.h>

int NCARDS = 52;
int NSUITS = 4;
int ONHAND = 5;

using std::string;

char values[] = "23456789TJQKA";
char suits[] = "CDHS";
enum HAND { HIGHCARD, ONEPAIR, TWOPAIR, SET, STRAIGHT,
            FLUSH, FULLHOUSE, QUADS, STRAIGHTFLUSH };

HAND evaluate(const vector<int>& deck, int&, int&);
int CompareHighCard(const vector<int>&, const vector<int>&);
int rank_card(char, char);
char suit(int card);
int suitNo(int);
char value(int card);
int valueNo(int);
void swap(int&, int&);
void split(const string&, char c, vector<string>& v);

int main()
{
    using namespace std;
    int i, j, deckNo;
    string deck;
    vector<string> cards;
    vector<int> decks[2];
    
    while (getline(cin, deck))
    {
        decks[0].clear();
        decks[1].clear();
        cards.clear();
        bool blackWins = false;
        bool whiteWins = false;
        bool tie = false;
        split(deck, ' ', cards);
        for (i=0; i<5; i++) 
            decks[0].push_back(rank_card(cards[i][0],cards[i][1]));
        for (i=5; i<10; i++) 
            decks[1].push_back(rank_card(cards[i][0],cards[i][1]));  

        for (deckNo=0; deckNo<=1; deckNo++)
        {
            for (i=0; i<ONHAND; i++)
                for (j=0; j<ONHAND-1; j++)
                    if (valueNo(decks[deckNo][j])<valueNo(decks[deckNo][j+1]))
                        swap(decks[deckNo][j],decks[deckNo][j+1]);
        }
        
        int blackValue = 0, whiteValue=0, blackOptionalValue = 0, whiteOptionalValue = 0;
        HAND handBlack = evaluate(decks[0], blackValue, blackOptionalValue);
        HAND handWhite = evaluate(decks[1], whiteValue, whiteOptionalValue);
        if (handBlack > handWhite)
            blackWins = true;
        if (handBlack < handWhite)
            whiteWins = true;
        if (handBlack == handWhite)
        {
            if (handBlack==HIGHCARD || handBlack==STRAIGHT ||
                handBlack==FLUSH || handBlack==STRAIGHTFLUSH)
            {
                int compare = CompareHighCard(decks[0], decks[1]);
                if (compare==-1) blackWins = true;
                    else if (compare==1) whiteWins = true;
                        else tie = true;
            } else
            if (handBlack==SET || handBlack==QUADS || handBlack==FULLHOUSE)
            {
                if (blackValue>whiteValue)
                    blackWins = true;
                else if (blackValue<whiteValue)
                    whiteWins = true;
            } else
            if (handBlack==ONEPAIR)
            {
                if (blackValue>whiteValue)
                    blackWins = true;
                else if (blackValue<whiteValue)
                    whiteWins = true;
                else
                {
                    vector <int> newDecks[2];
                    newDecks[0].clear();
                    newDecks[1].clear();
                    for (deckNo=0; deckNo<=1; deckNo++)
                    {
                        for (i=0; i<ONHAND; i++)
                            if (valueNo(decks[deckNo][i])!=blackValue)
                                newDecks[deckNo].push_back(decks[deckNo][i]);
                    }
                    tie = true;
                    for (i=0; i<ONHAND-2; i++)
                    {
                        if ( valueNo(newDecks[0][i])>valueNo(newDecks[1][i]) )
                        {
                            blackWins = true;
                            tie = false;
                            break;
                        }
                        else if ( valueNo(newDecks[0][i])<valueNo(newDecks[1][i]) )
                        {
                            whiteWins = true;
                            tie = false;
                            break;
                        }
                    }
                }
            } else
            if (handBlack==TWOPAIR)
            {
                if ((blackValue>whiteValue) || (blackValue==whiteValue && blackOptionalValue>whiteOptionalValue) )
                    blackWins = true;
                else if ((blackValue<whiteValue) || (blackValue==whiteValue && blackOptionalValue<whiteOptionalValue) )
                    whiteWins = true;
                else
                {
                    vector <int> newDecks[2];
                    newDecks[0].clear();
                    newDecks[1].clear();
                    for (deckNo=0; deckNo<=1; deckNo++)
                    {
                        for (i=0; i<ONHAND; i++)
                            if (valueNo(decks[deckNo][i])!=blackValue && valueNo(decks[deckNo][i])!=blackOptionalValue)
                                newDecks[deckNo].push_back(decks[deckNo][i]);
                    }
                    tie = true;
                    if ( valueNo(newDecks[0][0])>valueNo(newDecks[1][0]) )
                    {
                        blackWins = true;
                        tie = false;
                    }
                    else if ( valueNo(newDecks[0][0])<valueNo(newDecks[1][0]) )
                    {
                        whiteWins = true;
                        tie = false;
                    }
                }
            }
        }
        
        if (blackWins) cout << "Black wins." << endl;
            else if (whiteWins) cout << "White wins." << endl;
                else if (tie) cout << "Tie." << endl; 
    } 
    return 0;
}

void split(const string& s, char c, vector<string>& v)
{
    string::size_type i=0;
    string::size_type j=s.find(c);
    
    while ( j != string::npos )
    {
        v.push_back(s.substr(i, j-i));
        i = ++j;
        j = s.find(c, j);
        
        if ( j == string::npos )
            v.push_back(s.substr(i, s.length( )));
    }
}

HAND evaluate(const vector<int> &deck, int &value, int &optionalValue)
{
    int i, j;
    int countOfValues[ NCARDS / NSUITS ];
    int countOfSuits[ NSUITS ];
    for (i=0; i<NCARDS / NSUITS; i++) countOfValues[i] = 0;
    for (i=0; i<NSUITS; i++) countOfSuits[i] = 0;
    for (i=0; i<ONHAND; i++)
    {
        countOfValues[ valueNo(deck[i]) ]++;
        countOfSuits[ suitNo(deck[i]) ]++;
    }

    for (i=0; i<NSUITS; i++)
        if (countOfSuits[i]==5)
        {
            bool straightflush = true;
            for (j=0; j<ONHAND - 1; j++)
                if ( valueNo(deck[j]) != valueNo(deck[j+1]) + 1 ) 
                {
                    straightflush = false;
                    break;
                }
            if ( straightflush ) return STRAIGHTFLUSH;
        }

    for (i=0; i<NCARDS / NSUITS; i++)
        if (countOfValues[i]==4)
        {
            value = i;
            return QUADS;
        }

    for (i=0; i<NCARDS / NSUITS; i++)
        if (countOfValues[i] == 2)
        {
            for (j=0; j<NCARDS / NSUITS; j++)
                if (countOfValues[j] == 3)
                {
                    value = j;
                    return FULLHOUSE;
                }
        }
    
    for (i=0; i<NSUITS; i++)
        if (countOfSuits[i]==5)
        {
            return FLUSH;
        }

    bool straight = true;
    for (i=0; i<ONHAND - 1; i++)
        if ( valueNo(deck[i]) != valueNo(deck[i+1]) + 1 )
        {
            straight = false;
            break;
        }
    if (straight) return STRAIGHT;

    for (i=0; i<NCARDS / NSUITS; i++)
        if (countOfValues[i] == 3)
        {
            value = i;
            return SET;
        }

    for (i=0; i<NCARDS / NSUITS; i++)
        if (countOfValues[i] == 2)
        {
            for (j=0; j<NCARDS / NSUITS; j++)
                if (countOfValues[j] == 2 && i!=j)
                {
                    value = j;
                    optionalValue = i;
                    return TWOPAIR;
                }
        }

    for (i=0; i<NCARDS / NSUITS; i++)
        if (countOfValues[i] == 2)
        {
            value = i;
            return ONEPAIR;
        }

    return HIGHCARD;
}

int CompareHighCard(const vector<int> &deckA, const vector<int> &deckB)
{
    for (int i=0; i<ONHAND; i++)
    {
        if ( valueNo(deckA[i])>valueNo(deckB[i]) )
        {
            return -1;
        }
        else if ( valueNo(deckA[i])<valueNo(deckB[i]) )
        {
            return 1;
        }
    }
    return 0;
}

int rank_card(char value, char suit)
{
    int i, j;
    for (i=0; i<(NCARDS/NSUITS); i++)
        if (values[i]==value)
            for (j=0; j<NSUITS; j++)
                if (suits[j]==suit)
                    return ( i*NSUITS + j );
    return -1;
}

char suit(int card)
{
    return ( suits[card % NSUITS] );
}

char value(int card)
{
    return ( values[card / NSUITS] );
}

int suitNo(int card)
{
    for (int i=0; i<NSUITS; i++)
        if (suits[i]==suit(card))
            return ( i );
    return -1;
}

int valueNo(int card)
{
    for (int i=0; i<NCARDS/NSUITS; i++)
        if (values[i]==value(card))
            return ( i );
    return -1;
}

void swap(int& a, int& b)
{
    int temp = a;
    a = b;
    b = temp;
}
//---------------------------------------------------------------------------
